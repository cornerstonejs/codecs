# Points to latest release
# https://github.com/emscripten-core/emscripten/releases
# https://hub.docker.com/r/trzeci/emscripten/tags?page=1
# trzeci/emscripten:latest --> trzeci/emscripten:1.39.18-upstream
#
# Deprecated, in favor of:
# https://hub.docker.com/repository/r/emscripten/emsdk
# https://hub.docker.com/r/emscripten/emsdk
version: 2.1

# 
## https://github.com/cypress-io/circleci-orb
# orbs:
#   codecov: codecov/codecov@1.0.5
#   cypress: cypress-io/cypress@1.26.0

#https://circleci.com/docs/2.0/configuration-reference/#docker--machine--macos--windows-executor
executors:
  emscripten-porter:
    docker:
      - image: emscripten/emsdk:1.39.5
        environment:
          # Enable colors in term
          TERM: xterm
          # Avoid warnings by switching to noninteractive
          DEBIAN_FRONTEND: noninteractive
          # This Dockerfile's base image has a non-root user with sudo access. Use the "remoteUser"
          # property in devcontainer.json to use it. On Linux, the container user's GID/UIDs
          # will be updated to match your local UID/GID (when using the dockerFile property).
          # See https://aka.ms/vscode-remote/containers/non-root-user for details.
          USERNAME: vscode
          USER_UID: 1000
          USER_GID: 1000 # $USER_UID
  # Custom executor to override Cypress config
  deploy-to-prod-executor:
    docker:
      - image: 'cypress/browsers:node14.15.0-chrome86-ff82'
        environment:
          CYPRESS_BASE_URL: https://ohif-staging.netlify.com/
  chrome-and-pacs:
    docker:
      # Primary container image where all steps run.
      - image: 'cypress/browsers:node14.15.0-chrome86-ff82'
      - image: 'ohif/viewer-testdata:0.1-test'
      
      
defaults: &defaults
  docker:
    - image: circleci/node:14.15.0
      environment:
        TERM: xterm # Enable colors in term
        QUICK_BUILD: true
  working_directory: ~/repo
  
  
jobs:

  UNIT_TESTS:
    <<: *defaults
    steps:
      - run: yarn -v
      - checkout:
          post:
            - git fetch --all
      - restore_cache:
          name: Restore Yarn and Cypress Package Cache
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - yarn-packages-{{ checksum "yarn.lock" }}
            - yarn-packages-
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          paths:
            - ~/.cache ## Cache yarn and Cypress
          key: yarn-packages-{{ checksum "yarn.lock" }}
      # - run:
      #     name: 'JavaScript Test Suite'
      #     command: yarn run test:unit:ci
      # - run:
      #     name: 'Combine report output'
      #     command: |
      #       coverateDir="/home/circleci/repo/coverage"
      #       touch "${coverateDir}/reports"
      #       cat "${coverateDir}/clover.xml" >> "${coverateDir}/reports"
      #       echo "\<<\<<\<< EOF" >> "${coverateDir}/reports"
      #       cat "${coverateDir}/lcov.info" >>"${coverateDir}/reports"
      #       echo "\<<\<<\<< EOF" >> "${coverateDir}/reports"
      # - codecov/upload:
      #     file: '/home/circleci/repo/coverage/reports'

  EMSCRIPTEN_BUILD:
    executor: emscripten-porter
    steps:
      - run:
          name: Configure apt and install packages
          command: |
            apt-get update
            
            # Install C++ tools
            apt-get -y install build-essential cppcheck valgrind kcachegrind
            # apt-get -y install zlib1g-dev liblcms2-dev libtiff-dev libpng-dev libz-dev
            
            # version 3.17 of cmake
            wget -qO- "https://cmake.org/files/v3.17/cmake-3.17.4-Linux-x86_64.tar.gz" | tar --strip-components=1 -xz -C /usr/local
            
            # [Optional] Update UID/GID if needed
            if [ "$USER_GID" != "1000" ] || [ "$USER_UID" != "1000" ]; then
                groupmod --gid $USER_GID $USERNAME
                usermod --uid $USER_UID --gid $USER_GID $USERNAME
                chown -R $USER_UID:$USER_GID /home/$USERNAME;
            fi
            
            # Clean up
            apt-get autoremove -y
            apt-get clean -y
            rm -rf /var/lib/apt/lists/*
      - run: gcc --version
      - checkout
      - run: git submodule update --init
      # - run: bash build-native.sh
      - run: cd packages/openjpegjs/ && bash build.sh
      - store_artifacts:
          path: packages/openjpegjs/dist
          destination: /
      - store_artifacts:
          path: packages/openjpegjs/build/CMakeFiles
          destination: /CMakefiles/

  EMSCRIPTEN_BUILD_2:
    executor: emscripten-porter
    steps:
      - run:
          name: Configure apt and install packages
          command: |
            apt-get update
            
            # Install C++ tools
            apt-get -y install build-essential cppcheck valgrind kcachegrind
            # apt-get -y install zlib1g-dev liblcms2-dev libtiff-dev libpng-dev libz-dev
            
            # version 3.17 of cmake
            wget -qO- "https://cmake.org/files/v3.17/cmake-3.17.4-Linux-x86_64.tar.gz" | tar --strip-components=1 -xz -C /usr/local
            
            # [Optional] Update UID/GID if needed
            if [ "$USER_GID" != "1000" ] || [ "$USER_UID" != "1000" ]; then
                groupmod --gid $USER_GID $USERNAME
                usermod --uid $USER_UID --gid $USER_GID $USERNAME
                chown -R $USER_UID:$USER_GID /home/$USERNAME;
            fi
            
            # Clean up
            apt-get autoremove -y
            apt-get clean -y
            rm -rf /var/lib/apt/lists/*
      - run: gcc --version
      - checkout
      - run: git submodule update --init
      # - run: bash build-native.sh
      - run: cd packages/libjpeg-turbojs/ && bash build.sh
      - store_artifacts:
          path: packages/libjpeg-turbojs/dist
          destination: /
      - store_artifacts:
          path: packages/libjpeg-turbojs/build/CMakeFiles
          destination: /CMakefiles/

  NPM_PUBLISH:
    <<: *defaults
    steps:
      - run: yarn -v
      - checkout:
          post:
            - git fetch --all
      - restore_cache:
          name: Restore Yarn and Cypress Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
            - yarn-packages-
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          paths:
            - ~/.cache/yarn
          key: yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Avoid hosts unknown for github
          command: |
            rm -rf ~/.ssh
            mkdir ~/.ssh/
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            git config --global user.email "danny.ri.brown+ohif-bot@gmail.com"
            git config --global user.name "ohif-bot"
      - run:
          name: Authenticate with NPM registry
          command:
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/repo/.npmrc
      - run: npx lerna version
      - run: npx lerna publish from-package
      
workflows:
  version: 2

  PR_CHECKS:
    jobs:
      # - UNIT_TESTS:
      #     filters:
      #       branches:
      #         ignore:
      #           - main
      #           - feat/*
      #           - hotfix/*
      #- EMSCRIPTEN_BUILD:
      - EMSCRIPTEN_BUILD_2:
          filters:
            branches:
              ignore:
                - main
                - feat/*
                - hotfix/*

  DEPLOY:
    jobs:
      - NPM_PUBLISH:
          filters:
            branches:
              only: main
