version: 2.1

# 
## https://github.com/cypress-io/circleci-orb
# orbs:
#   codecov: codecov/codecov@1.0.5
#   cypress: cypress-io/cypress@1.26.0

#https://circleci.com/docs/2.0/configuration-reference/#docker--machine--macos--windows-executor
executors:
  emscripten-porter:
    docker:
      # @see https://hub.docker.com/repository/r/emscripten/emsdk
      - image: emscripten/emsdk:1.39.5
        environment:
          # Enable colors in term
          TERM: xterm
          # Avoid warnings by switching to noninteractive
          DEBIAN_FRONTEND: noninteractive
          # This Dockerfile's base image has a non-root user with sudo access. Use the "remoteUser"
          # property in devcontainer.json to use it. On Linux, the container user's GID/UIDs
          # will be updated to match your local UID/GID (when using the dockerFile property).
          # See https://aka.ms/vscode-remote/containers/non-root-user for details.
          USERNAME: vscode
          USER_UID: 1000
          USER_GID: 1000 # $USER_UID
  node:
    docker:
      - image: circleci/node:14.15.0
        environment:
          TERM: xterm # Enable colors in term
  # Custom executor to override Cypress config
  # deploy-to-prod-executor:
  #   docker:
  #     - image: 'cypress/browsers:node14.15.0-chrome86-ff82'
  #       environment:
  #         CYPRESS_BASE_URL: https://ohif-staging.netlify.com/
  # chrome-and-pacs:
  #   docker:
  #     # Primary container image where all steps run.
  #     - image: 'cypress/browsers:node14.15.0-chrome86-ff82'
  #     - image: 'ohif/viewer-testdata:0.1-test'
      
jobs:

  # UNIT_TESTS:
  #   steps:
  #     - run: yarn -v
  #     - checkout:
  #         post:
  #           - git fetch --all
  #     - restore_cache:
  #         name: Restore Yarn and Cypress Package Cache
  #         keys:
  #           # when lock file changes, use increasingly general patterns to restore cache
  #           - yarn-packages-{{ checksum "yarn.lock" }}
  #           - yarn-packages-
  #     - run:
  #         name: Install Dependencies
  #         command: yarn install --frozen-lockfile
  #     - save_cache:
  #         name: Save Yarn Package Cache
  #         paths:
  #           - ~/.cache ## Cache yarn and Cypress
  #         key: yarn-packages-{{ checksum "yarn.lock" }}
      # - run:
      #     name: 'JavaScript Test Suite'
      #     command: yarn run test:unit:ci
      # - run:
      #     name: 'Combine report output'
      #     command: |
      #       coverateDir="/home/circleci/repo/coverage"
      #       touch "${coverateDir}/reports"
      #       cat "${coverateDir}/clover.xml" >> "${coverateDir}/reports"
      #       echo "\<<\<<\<< EOF" >> "${coverateDir}/reports"
      #       cat "${coverateDir}/lcov.info" >>"${coverateDir}/reports"
      #       echo "\<<\<<\<< EOF" >> "${coverateDir}/reports"
      # - codecov/upload:
      #     file: '/home/circleci/repo/coverage/reports'

  # Run build since main
  # Run test since main
  # Upload test results to CircleCI
  # Upload test results to a ?? per package?
  BUILD:
    executor: emscripten-porter
    working_directory: ~/repo
    steps:
      - run:
          name: Configure apt and install packages
          command: |
            apt-get update
            apt-get install -y gnupg

            # Install & Setup Yarn
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list

            apt-get update
            apt install yarn -y
            
            # Install C++ tools
            apt-get -y install build-essential cppcheck valgrind kcachegrind

            # Dependencies for libjpeg-turbo builds
            apt-get -y install nasm texinfo
            
            # version 3.17 of cmake
            wget -qO- "https://cmake.org/files/v3.17/cmake-3.17.4-Linux-x86_64.tar.gz" | tar --strip-components=1 -xz -C /usr/local
            
            # [Optional] Update UID/GID if needed
            if [ "$USER_GID" != "1000" ] || [ "$USER_UID" != "1000" ]; then
                groupmod --gid $USER_GID $USERNAME
                usermod --uid $USER_UID --gid $USER_GID $USERNAME
                chown -R $USER_UID:$USER_GID /home/$USERNAME;
            fi
            
            # Clean up
            apt-get autoremove -y
            apt-get clean -y
            rm -rf /var/lib/apt/lists/*
      - run: gcc --version
      - checkout
      - run: git submodule update --init
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - run: yarn run build:ci
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .
  
  TEST:
    executor: node
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo
      - run: yarn run test:ci

  NPM_PUBLISH:
    executor: emscripten-porter
    working_directory: ~/repo
    steps:
      #
      # Environment setup to install yarn, CMAKE, and C++ tools
      # TODO: Leverage CircleCI caching for these dependencies across builds,
      # or configure docker layer caching (this should be deterministic). We could
      # also publish an image on top of our executor to speed up build times.
      # TODO: As this is a requirement for local testing, we should probably
      # push this into a shared script
      - run:
          name: Configure apt and install packages
          command: |
            apt-get update
            apt-get install -y gnupg

            # Install & Setup Yarn
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list

            apt-get update
            apt install yarn -y
            
            # Install C++ tools
            apt-get -y install build-essential cppcheck valgrind kcachegrind
            
            # version 3.17 of cmake
            wget -qO- "https://cmake.org/files/v3.17/cmake-3.17.4-Linux-x86_64.tar.gz" | tar --strip-components=1 -xz -C /usr/local
            
            # [Optional] Update UID/GID if needed
            if [ "$USER_GID" != "1000" ] || [ "$USER_UID" != "1000" ]; then
                groupmod --gid $USER_GID $USERNAME
                usermod --uid $USER_UID --gid $USER_GID $USERNAME
                chown -R $USER_UID:$USER_GID /home/$USERNAME;
            fi
            
            # Clean up
            apt-get autoremove -y
            apt-get clean -y
            rm -rf /var/lib/apt/lists/*
      #
      # Print versions of misc. dependent tooling
      - run: gcc --version
      - run: node -v
      - run: yarn -v
      #
      # Checkout source code and dependent submodules
      # Where submodules are the C/C++ libraries we intend to port
      # using emscripten
      - checkout
      - run: git submodule update --init
      #
      # Caches dependencies between CI runs. We use the `yarn.lock` file as our
      # "cache key". We then restore dependencies from lockfile and update our
      # cache if it's changed.
      - restore_cache:
          name: Restore Yarn and Cypress Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
            - yarn-packages-
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          paths:
            - ~/.cache/yarn
          key: yarn-packages-{{ checksum "yarn.lock" }}
      #
      # This step is a prerequisite for `lerna version`
      # The git config values need to match the personal access token set
      # via the `GH_TOKEN` environment variable
      - run:
          name: Avoid hosts unknown for github
          command: |
            rm -rf ~/.ssh
            mkdir ~/.ssh/
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            git config --global user.email "danny.ri.brown@gmail.com"
            git config --global user.name "dannyrb"
      #
      # This step is a prerequisite for `lera publish`
      # Lerna and NPM will not automatically detect environment variables
      # instead, we set our registry and auth token by writing to a temporary
      # `.npmrc` file that `lerna publish`/`npm publish` will use
      # The value is determined by out `NPM_TOKEN` environment variable
      - run:
          name: Authenticate with NPM registry
          command:
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/repo/.npmrc
      #
      # This step is configured in `/lerna.json`.
      # Only runs on `main` branch. Walks all commits since last tagged release.
      # Determines, based on commit syntax and files changed, what each packages new
      # version should be. Creates a commit to update all updated package versions.
      # Pushes commit to main, cuts GitHub release w/ changelog.
      # @see https://github.com/lerna/lerna/tree/main/commands/version
      - run: npx lerna version
      #
      # This step is configured in `/lerna.json`.
      # Checks package versions and publishes packages where the latest version is not
      # present in the registry. This command ignores changes to files w/ specific extensions.
      # @see https://github.com/lerna/lerna/tree/main/commands/publish
      - run: npx lerna publish from-package
      
workflows:
  version: 2

  PR_CHECKS:
    jobs:
      - BUILD:
          filters:
            branches:
              ignore:
                - main
      - TEST:
          requires:
            - BUILD
  DEPLOY:
    jobs:
      - NPM_PUBLISH:
          filters:
            branches:
              only: main
